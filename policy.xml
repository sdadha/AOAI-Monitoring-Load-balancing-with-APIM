<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <!-- Validate JWT Token -->
        <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid." output-token-variable-name="jwt-token">
            <openid-config url="https://login.microsoftonline.com/d30c6f67-857b-4f81-a8fc-20b98c05207a/.well-known/openid-configuration" />
            <required-claims>
                <claim name="aud" match="any">
                    <value>8c7913e3-3be4-4aea-b984-3bdef248d371</value>
                </claim>
            </required-claims>
        </validate-jwt>
        <!-- Fetch subject from JWT Token and set it as an header-->
        <set-header name="caller-subject" exists-action="override">
            <value>@(((Jwt)context.Variables["jwt-token"]).Subject)</value>
        </set-header>
        <!-- Managed Identity based authentication of APIM with Azure OpenAI-->
        <authentication-managed-identity resource="https://cognitiveservices.azure.com" />
        <!-- round robin load balancing of multiple OpenAI BE endpoints -->
        <cache-lookup-value key="backend-counter" variable-name="backend-counter" />
        <choose>
            <when condition="@(!context.Variables.ContainsKey("backend-counter"))">
                <set-variable name="backend-counter" value="1" />
                <cache-store-value key="backend-counter" value="1" duration="100" />
            </when>
        </choose>
        <choose>
            <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 2 == 1)">
                <set-backend-service backend-id="skd-aoai-eus" />
                <set-variable name="backend-counter" value="2" />
                <cache-store-value key="backend-counter" value="2" duration="100" />
            </when>
            <otherwise>
                <set-backend-service backend-id="skd-aoai-ejp" />
                <set-variable name="backend-counter" value="1" />
                <cache-store-value key="backend-counter" value="1" duration="100" />
            </otherwise>
        </choose>
        <base />
    </inbound>
    <backend>
        <retry condition="@(context.Response.StatusCode == 429 || context.Response.StatusCode >= 500)" count="5" interval="1" delta="1" max-interval="8" first-fast-retry="false">
            <choose>
                <when condition="@(int.Parse((string)context.Variables["backend-counter"]) % 2 == 1)">
                    <set-backend-service backend-id="skd-aoai-eus" />
                    <set-variable name="backend-counter" value="2" />
                    <cache-store-value key="backend-counter" value="2" duration="100" />
                </when>
                <otherwise>
                    <set-backend-service backend-id="skd-aoai-ejp" />
                    <set-variable name="backend-counter" value="1" />
                    <cache-store-value key="backend-counter" value="1" duration="100" />
                </otherwise>
            </choose>
            <forward-request buffer-request-body="true" />
        </retry>
    </backend>
    <outbound>
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <set-header name="total-tokens" exists-action="override">
                    <value>@{
                    var response=context.Response.Body.As<JObject>(preserveContent: true).SelectToken("usage.total_tokens").ToString();
                    return response.ToString();
                }</value>
                </set-header>
            </when>
        </choose>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
